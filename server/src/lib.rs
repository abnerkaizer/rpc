use clap::App;
use futures::prelude::*;
use service::World;
use std::{
    io,
    net::{IpAddr, SocketAddr},
};
use tarpc::{
    context,
    server::{self, Channel, Handler},
    tokio_serde::formats::Json,
};

#[derive(Clone)]
struct Server(SocketAddr);

#[tarpc::server]
impl World for Server {
    async fn init(self, _: context::Context, name: String) -> String {
        format!("Hello, {} !", name)
    }
}

#[tokio::main]

async fn main() -> io::Result<()> {
    env_logger::init();

    let _flags = App::new("Server")
        .version("0.1")
        .author("Abner Kaizer <abnerkaizer@protonmail.com>")
        .about("Simple RPC server.");
    let port = String::from("9090");
    let port = port.parse().expect("Failed to parse.");
    let server_addr = (IpAddr::from([0, 0, 0, 0]), port);
    let mut listener = tarpc::serde_transport::tcp::listen(&server_addr, Json::default).await?;
    listener.config_mut().max_frame_length(usize::MAX);
    listener
        // Ignore accept errors.
        .filter_map(|r| future::ready(r.ok()))
        .map(server::BaseChannel::with_defaults)
        // Limit channels to 1 per IP.
        .max_channels_per_key(1, |t| t.as_ref().peer_addr().unwrap().ip())
        // serve is generated by the service attribute. It takes as input any type implementing
        // the generated World trait.
        .map(|channel| {
            let server = Server(channel.as_ref().as_ref().peer_addr().unwrap());
            channel.respond_with(server.serve()).execute()
        })
        // Max 10 channels.
        .buffer_unordered(10)
        .for_each(|_| async {})
        .await;
    Ok(())
}
pub fn run() {
    main().unwrap();
}
