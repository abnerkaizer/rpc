use clap::{App, Arg};
use service::WorldClient;
use std::{io, net::SocketAddr};
use tarpc::{client, context, tokio_serde::formats::Json};
#[tokio::main]
async fn main() -> io::Result<()> {
    env_logger::init();

    let flags = App::new("Client")
        .version("0.1")
        .author("Abner Kaizer <abnerkaizer@protonmail.com>")
        .about("Say hello!")
        .arg(
            Arg::with_name("name")
                .short("n")
                .long("name")
                .value_name("NAME")
                .help("Sets the user name to be displayed.")
                .required(true)
                .takes_value(true),
        )
        .get_matches();

    let server_addr = String::from("127.0.0.1:9090");
    let server_addr = server_addr
        .parse::<SocketAddr>()
        .unwrap_or_else(|e| panic!(r#"--server_addr value "{}" invalid: {}"#, server_addr, e));

    let name = flags.value_of("name").unwrap().into();

    let mut transport = tarpc::serde_transport::tcp::connect(server_addr, Json::default);
    transport.config_mut().max_frame_length(usize::MAX);

    // WorldClient is generated by the service attribute. It has a constructor `new` that takes a
    // config and any Transport as input.
    let mut client = WorldClient::new(client::Config::default(), transport.await?).spawn()?;

    // The client has an RPC method for each RPC defined in the annotated trait. It takes the same
    // args as defined, with the addition of a Context, which is always the first arg. The Context
    // specifies a deadline and trace information which can be helpful in debugging requests.
    let hello = client.init(context::current(), name).await?;

    println!("{}", hello);

    Ok(())
}
pub fn run() {
    main().unwrap();
}
